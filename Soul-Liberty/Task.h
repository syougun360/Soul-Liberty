
/**
*
*	@author	yamada masamitsu
*	@date	2014.09.26
*
*/
#pragma once

#include <unordered_map>
#include <string> 
#include <memory>
#include <cassert>
#include "Noncopyable.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	【タスクの使用方法】
//	
//　・まずタスクのインスタンスを宣言をする
//	
//	・インスタンスの初期化
//	
//	・TaskのStart(),Update(),Draw(),Remove()の書く場所
//	ゲーム管理クラスのコンストラクタの一番下にTask->Start();を書く
//	ゲーム管理クラスのUpdate関数の中に
//	Task->Update();
//	Task->Draw();
//	Tadk->Remove();
//	この順で書いてください!
//	これで登録したオブジェクトはすべて処理が回るようになります!
//	
//
//	・タスクに登録するまでの手順

//	①	スマートポインタでInstanceを宣言,初期化
//	
//	②	アクターにオブジェクトの情報を入れ込む
//	
//	③	オブジェクトをタスクに入れる
//	Task->Append("登録名", 登録するオブジェクト(インスタンス));
//	例）Task->Append("Player",Player);
//	
//	・注意点
//	登録してない名前は必ずエラーが出る！
//　必ず登録した名前を覚えておく！
//	登録した数以上のものを取得しないようにしてください！
//　
//	・登録したオブジェクトを他の所で取得したい場合
//	Task->GetComponent<取得したいクラス名>(登録した名前, 登録した番号);
//	例）Task->GetComponent<CPlayer>("Player", 0);
//	
//　・登録した要素をすべて取得したい場合
//	Task->GetComponent<取得したいクラス名>(登録した名前);
//	例）Task->GetComponent<CEnemy>("Enemy");
//
//	・登録した要素の数を取得する
//	Task->GetNum(登録した名前);
//	例）Task->GetNum("Enemy");
//	
//	・for(auto&)でタスクの要素を使う方法
//	基本的に基底クラスObjectのクラスに入っている要素しか取得できない
//	例）for(auto& obj : Task->GetActor(登録名))
//	{
//		obj->メソッド(関数) or 変数;
//	}
//	
//　派生クラスの要素を取得したい場合
//	DynamicCast<取得したいクラス名>(要素);
//	例）for(auto& obj : Task->GetActor(登録名))
//	{
//		DynamicCast<クラス名>(obj)->メソッド(関数) or 変数;
//	}
//	
//	・タスクに登録したオブジェクトはメモリの解放はしなくてよい！
//	・登録したオブジェクトを途中で削除したい場合は、isDelete をtrueにすれば次のフレームで削除される
//　
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CActor;

class CTask 
{
	std::unordered_map<std::string, std::shared_ptr<CActor>> object;
public:

	// ------------------------------
	//　Actorを入れる
	// ------------------------------
	void Append(std::string name, std::shared_ptr<CActor> actor);

	// ------------------------------
	//　Actorを空にする
	// ------------------------------
	void Clear();
	
	// ------------------------------
	//　タスクから消去する
	// ------------------------------
	void Remove();

	// ------------------------------
	//　iniデータアップデート
	// ------------------------------
	void IniDataUpdate();

	// ------------------------------
	//　iniデータリスト
	// ------------------------------
	void IniDataList();

	// ----------------------------------
	//　アップデートの前に呼ばれる処理
	// ----------------------------------
	void Start();
	
	// ------------------------------
	//　アップデート
	// ------------------------------
	void Update();
	
	// ------------------------------
	//　描画
	// ------------------------------
	void Draw();

	// ------------------------------
	//　終了処理
	// ------------------------------
	void Finish();

	// ------------------------------------------------------
	// オブジェクトを取得する（IDまで取得できる）
	// ------------------------------------------------------
	template<typename OBJ>
	std::shared_ptr<OBJ> GetComponent(const std::string& name, const int Id)
	{
		auto it = object.find(name);
		return std::dynamic_pointer_cast<OBJ>(it->second->GetComponent(Id));
	}

	// -------------------------------------------------------------
	// オブジェクトを取得する（Actorの中にあるクラスの全体を取得）
	// -------------------------------------------------------------
	std::shared_ptr<CActor>  GetComponents(const std::string& name);

	// ------------------------------------------------------
	//　アクター自体を取得する
	// ------------------------------------------------------
	std::vector<std::shared_ptr<CActor>> GetActor(const std::string& name);

	// ------------------------------------------
	// オブジェクトの数を取得
	// -----------------------------------------
	int GetNum(const std::string& name);
};
